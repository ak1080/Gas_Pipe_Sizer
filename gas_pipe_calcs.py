"""
Gas Pipe Sizing Calculator (Based on The 2021 Uniform Plumbing Code - Chapter 10 Fuel Gas Piping)

Author: Alex Kalmbach

Description: Program computes the maximum flow of gas (cubic feet per hour) on standard metallic pipe sizes.
The plumbing code lists two equations from NFPA that the tables are based on. There is a low pressure equation
for when inlet pressure is less than 1.5 psi and a high pressure equation for when pressure is over 1.5 psi.
The constants Cr and Y depend on if the chosen gas is natural gas or propane.
The table generated by the code is intended to size gas pipe using either The Longest Length Method, or the Branch Length Method

Version: 1.0 (completed 01/08/2025)
"""
import tkinter as tk
from tkinter import ttk, messagebox
from math import floor

# Conversion factor
PSI_TO_INWC = 27.7

# Dictionary of pipe sizes. The key is the nominal pipe size and the value is the actual inner diameter.
metallic_pipe_sizes = {
    0.5: 0.622, 0.75: 0.824, 1: 1.049, 1.25: 1.380, 1.5: 1.610, 2: 2.067, 2.5: 2.469,
    3: 3.068, 4: 4.026, 5: 5.047, 6: 6.065,
}

# Gas type properties (Cr and Y values)
gas_properties = {
    "natural": {"Cr": 0.6094, "Y": 0.9992},
    "propane": {"Cr": 1.2462, "Y": 0.9910}
}

# Generate pipe lengths
def generate_lengths():
    return (
        list(range(10, 110, 10)) +
        list(range(125, 225, 25)) +
        list(range(250, 1050, 50)) +
        list(range(1100, 2100, 100))
    )

# Gas capacity calculation
def gas_capacity(inlet_pressure_psi, nominal_diam, press_drop_inwc, length, gas_type):
    gas_data = gas_properties.get(gas_type.lower())
    if not gas_data:
        raise ValueError("Invalid gas type.")

    Cr, Y = gas_data["Cr"], gas_data["Y"]
    if inlet_pressure_psi < 1.5:
        capacity = (metallic_pipe_sizes[nominal_diam] * 19.17 * (press_drop_inwc / (Cr * length)) ** 0.206) ** (1 / 0.381)
    else:
        P1 = inlet_pressure_psi + 14.7
        P2 = P1 - press_drop_inwc / PSI_TO_INWC
        capacity = (metallic_pipe_sizes[nominal_diam] * 18.93 * (((P1 ** 2 - P2 ** 2) * Y) / (Cr * length)) ** 0.206) ** (1 / 0.381)

    return capacity

# Validate inputs
def validate_inputs():
    try:
        inlet_pressure = float(inlet_pressure_entry.get())
        press_drop = float(press_drop_entry.get())
        press_drop_unit = press_drop_unit_combobox.get()

        press_drop_inwc = press_drop * PSI_TO_INWC if press_drop_unit == "psi" else press_drop
        return inlet_pressure, press_drop_inwc
    except ValueError:
        return None, None

# Update Cr and Y values
def update_cr_y_values():
    gas_type = gas_type_combobox.get().lower()
    gas_data = gas_properties.get(gas_type, {"Cr": 0, "Y": 0})
    cr_y_label.config(text=f" Gas Constants for {gas_type.title()} Gas\n Cr: {gas_data['Cr']:.4f}, Y: {gas_data['Y']:.4f}")

# Display table
def display_table(*args):
    inlet_pressure, press_drop_inwc = validate_inputs()
    update_cr_y_values()

    for item in table.get_children():
        table.delete(item)

    if not inlet_pressure or press_drop_inwc >= inlet_pressure * PSI_TO_INWC:
        for length in generate_lengths():
            table.insert("", "end", values=[length] + ["-" for _ in metallic_pipe_sizes])
        return

    gas_type = gas_type_combobox.get()
    for length in generate_lengths():
        values = [length]
        for nominal_size in metallic_pipe_sizes:
            try:
                capacity = floor(gas_capacity(inlet_pressure, nominal_size, press_drop_inwc, length, gas_type))
                values.append(f"{capacity:,}")
            except ValueError:
                values.append("-")
        table.insert("", "end", values=values)

# Info button function
def show_info():
    info_text = (
        "This Gas Pipe Sizer calculates the maximum capacity of gas that can flow through a Schedule 40 Metallic pipe "
        "based on the input values provided by the user.\n\n"
        "Instructions:\n"
        "1. Select the type of gas (Natural or Propane).\n"
        "2. Enter the inlet pressure in psi.\n"
        "3. Enter the pressure drop and select the unit (inWC or psi).\n"
        "4. The table will automatically update to show the maximum gas capacity for various pipe sizes and lengths.\n\n"
        "The calculations are based on the NFPA formulas for low pressure (< 1.5 psi) and high-pressure (>= 1.5 psi) gas systems.\n\n"
        "Developed in Python by Alex Kalmbach"
    )
    messagebox.showinfo("Program Information", info_text)

# Main GUI
root = tk.Tk()
root.title("Gas Pipe Sizer - Schedule 40 Metallic Pipe")

# Title and Info Button
title_frame = ttk.Frame(root)
title_frame.grid(row=0, column=0, columnspan=3, pady=5)

title_label = ttk.Label(title_frame, text="Gas Pipe Sizer - Schedule 40 Metallic Pipe", font=("Helvetica", 12, "bold"))
title_label.pack(side="left")

info_button = ttk.Button(title_frame, text="i", command=show_info, width=2)
info_button.pack(side="left", padx=5)

# Input Frame
input_frame = ttk.Frame(root)
input_frame.grid(row=1, column=0, columnspan=2, padx=10, pady=10)

# Input fields
inputs = [
    ("Gas Type:", gas_type_combobox := ttk.Combobox(input_frame, values=["Natural", "Propane"], state="readonly")),
    ("Inlet Pressure (psi):", inlet_pressure_entry := ttk.Entry(input_frame)),
    ("Pressure Drop:", press_drop_entry := ttk.Entry(input_frame)),
    ("Pressure Drop Units:", press_drop_unit_combobox := ttk.Combobox(input_frame, values=["inWC", "psi"], state="readonly")),
]

for i, (label, widget) in enumerate(inputs, start=0):
    ttk.Label(input_frame, text=label).grid(row=i, column=0, padx=5, pady=5, sticky="e")
    widget.grid(row=i, column=1, padx=5, pady=5)

gas_type_combobox.set("Natural")
press_drop_unit_combobox.set("inWC")

# Cr and Y values display
cr_y_label = ttk.Label(root, text="Cr: 0.6094, Y: 0.9992", borderwidth=1, relief="solid", anchor="center", padding=5)
cr_y_label.grid(row=2, column=0, columnspan=2, padx=10, pady=5)

# Table heading
capacity_label = ttk.Label(root, text="Maximum Capacity In Cubic Feet of Gas Per Hour", anchor="center", font=("Helvetica", 10, "bold"))
capacity_label.grid(row=3, column=0, columnspan=3, padx=10, pady=5)

# Table Frame
table_frame = ttk.Frame(root)
table_frame.grid(row=4, column=0, columnspan=3, padx=10, pady=10)

# Table Columns
columns = ["Length (ft)"] + [f"{size}\" (ID: {inner_diam}\")" for size, inner_diam in metallic_pipe_sizes.items()]
table = ttk.Treeview(table_frame, columns=columns, show="headings", height=15)

# Configure Table Headings
for col in columns:
    table.heading(col, text=col)
    table.column(col, width=100, anchor="center")

# Scrollbars
scroll_y = ttk.Scrollbar(table_frame, orient="vertical", command=table.yview)
scroll_x = ttk.Scrollbar(table_frame, orient="horizontal", command=table.xview)
table.configure(yscrollcommand=scroll_y.set, xscrollcommand=scroll_x.set)
scroll_y.pack(side="right", fill="y")
scroll_x.pack(side="bottom", fill="x")
table.pack(side="left", fill="both", expand=True)

# Author Credit
author_label = ttk.Label(root, text="Developed by Alex Kalmbach", font=("Helvetica", 8, "italic"))
author_label.grid(row=5, column=2, sticky="e", padx=10, pady=5)

# Bind inputs to update the table automatically
for widget in [inlet_pressure_entry, press_drop_entry, gas_type_combobox, press_drop_unit_combobox]:
    widget.bind("<KeyRelease>", display_table)
    widget.bind("<<ComboboxSelected>>", display_table)

# Initial display
display_table()

# Run the GUI
root.mainloop()





